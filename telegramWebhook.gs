/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram
 * @file telegramWebhook.gs
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
const TELEGRAM_BOT_TOKEN = '8035396706:AAHfH04Cvfxyk5ZUn0kiTmYzRM_1hN7-FLQ';
const TELEGRAM_CHANNEL_ID = '-1002825944844';
const TELEGRAM_GROUP_ID = '-1002813491955';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram Webhook
 * @param {Object} e - –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Google Apps Script
 * @return {ContentService.TextOutput} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä—É Telegram
 */
function doPost(e) {
  try {
    if (!e || !e.postData || !e.postData.contents) {
      console.warn("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å:", e);
      return ContentService.createTextOutput("Invalid request");
    }

    const update = JSON.parse(e.postData.contents);
    console.log("–ü–æ–ª—É—á–µ–Ω update:", JSON.stringify(update));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫
    if (update.callback_query) {
      handleCallbackQuery(update.callback_query);
      return ContentService.createTextOutput("OK");
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if (update.message) {
      handleMessage(update.message);
    }

    return ContentService.createTextOutput("OK");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ doPost:", error);
    return ContentService.createTextOutput("Error: " + error.message);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
 * @param {Object} callbackQuery - –û–±—ä–µ–∫—Ç callback –æ—Ç Telegram
 */
function handleCallbackQuery(callbackQuery) {
  try {
    const data = callbackQuery.data; // "accept" –∏–ª–∏ "reject"
    const userId = callbackQuery.from.id;
    const message = callbackQuery.message;
    
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç ${userId}: ${data}`);

    // –ù–∞—Ö–æ–¥–∏–º –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –ø–æ Telegram ID
    const guard = findGuardByTelegramId(userId);
    if (!guard) {
      sendTelegramMessage(userId, "‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤!");
      answerCallbackQuery(callbackQuery.id, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤");
      return;
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageText = message.text || '';
    const [dateValue, post] = parseOrderDataFromMessage(messageText);
    
    if (!dateValue || !post) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:", messageText);
      sendTelegramMessage(userId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ä—è–¥–∞");
      return;
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∂—É—Ä–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç–∏–π
    writeToJournal({
      dateValue: dateValue,
      post: post,
      fio: guard.fio,
      phone: guard.phone,
      status: data === 'accept' ? '–ø—Ä–∏–Ω—è–ª' : '–æ—Ç–∫–∞–∑–∞–ª—Å—è',
      telegramId: userId
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    sendGroupNotification({
      date: dateValue,
      post: post,
      fio: guard.fio,
      phone: guard.phone,
      status: data === 'accept' ? '–ø—Ä–∏–Ω—è–ª' : '–æ—Ç–∫–∞–∑–∞–ª—Å—è'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const responseText = data === 'accept' 
      ? `‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –Ω–∞—Ä—è–¥:\n–î–∞—Ç–∞: ${dateValue}\n–ü–æ—Å—Ç: ${post}` 
      : `‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –Ω–∞—Ä—è–¥–∞:\n–î–∞—Ç–∞: ${dateValue}\n–ü–æ—Å—Ç: ${post}`;
    
    sendTelegramMessage(userId, responseText);
    answerCallbackQuery(callbackQuery.id, responseText);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ handleCallbackQuery:", error);
    answerCallbackQuery(callbackQuery.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
  }
}

/**
 * –ò—â–µ—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –ø–æ Telegram ID
 * @param {string} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @return {Object|null} –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –∏–ª–∏ null
 */
function findGuardByTelegramId(telegramId) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("–û—Ö—Ä–∞–Ω–Ω–∏–∫–∏");
  if (!sheet) {
    console.error("–õ–∏—Å—Ç '–û—Ö—Ä–∞–Ω–Ω–∏–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return null;
  }

  const data = sheet.getDataRange().getValues();
  // –°—Ç–æ–ª–±—Ü—ã: A(0)-Telegram ID, F(5)-–§–ò–û, G(6)-–¢–µ–ª–µ—Ñ–æ–Ω
  for (let i = 1; i < data.length; i++) {
    if (String(data[i][0]) === String(telegramId)) {
      return {
        telegramId: data[i][0],
        fio: data[i][5] || '',
        phone: data[i][6] || ''
      };
    }
  }
  return null;
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∂—É—Ä–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç–∏–π
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
 */
function writeToJournal(data) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("–ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç–∏–π");
  if (!sheet) {
    console.error("–õ–∏—Å—Ç '–ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç–∏–π' –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  const timestamp = new Date();
  const formattedDate = formatDateForSheet(new Date(data.dateValue));
  
  sheet.appendRow([
    '', // –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ A
    formattedDate,
    data.post,
    data.fio,
    data.phone,
    formatDate(timestamp),
    data.status
  ]);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function sendGroupNotification(data) {
  const message = `üì¢ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞—Ä—è–¥–∞:\n\n` +
    `üìÖ –î–∞—Ç–∞: ${data.date}\n` +
    `üè¢ –ü–æ—Å—Ç: ${data.post}\n` +
    `üë§ –û—Ö—Ä–∞–Ω–Ω–∏–∫: ${data.fio}\n` +
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n` +
    `üîÑ –°—Ç–∞—Ç—É—Å: ${data.status}\n` +
    `‚è± –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${formatDate(new Date())}`;

  sendTelegramMessage(TELEGRAM_GROUP_ID, message);
}

/**
 * –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @return {Array} [dateValue, post]
 */
function parseOrderDataFromMessage(messageText) {
  const dateMatch = messageText.match(/–î–∞—Ç–∞:\s*(.+)/);
  const postMatch = messageText.match(/–ü–æ—Å—Ç:\s*(.+)/);
  
  const dateValue = dateMatch ? dateMatch[1].trim() : '';
  const post = postMatch ? postMatch[1].trim() : '';
  
  return [dateValue, post];
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} chatId - ID —á–∞—Ç–∞
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function sendTelegramMessage(chatId, text) {
  try {
    const payload = {
      method: "post",
      payload: {
        chat_id: chatId,
        text: text,
        parse_mode: "HTML"
      }
    };
    
    UrlFetchApp.fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, payload);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ callback query
 * @param {string} callbackQueryId - ID callback query
 * @param {string} text - –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
 */
function answerCallbackQuery(callbackQueryId, text) {
  try {
    const payload = {
      method: "post",
      payload: {
        callback_query_id: callbackQueryId,
        text: text
      }
    };
    
    UrlFetchApp.fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, payload);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:", error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function testWebhook() {
  const mockData = {
    postData: {
      contents: JSON.stringify({
        callback_query: {
          id: "test123",
          from: { id: "–≤–∞—à_telegram_id" },
          data: "accept",
          message: {
            text: "–ù–æ–≤—ã–π –Ω–∞—Ä—è–¥:\n–î–∞—Ç–∞: 15.07.2025\n–ü–æ—Å—Ç: –ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥"
          }
        }
      })
    }
  };
  
  doPost(mockData);
}
